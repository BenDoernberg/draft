{EventEmitter} = require \events
Bot = require \./bot
Human = require \./human
db = require \./db
_ = require \./_

class Draft extends EventEmitter
  (opts) ->
    @ <<<< opts
    @ <<<<
      id: _.rand 1e9 .toString 16
      players: []
      startTime: Date.now! / 1e3 | 0

  delta: -1
  round: 0

  join: (sock) ->
    {id} = sock
    for p of @players
      if p.id is id
        p.attach sock
        @meta!
        return

    if @players.length is @seats
      return p.send \error 'draft full'

    h = new Human sock, sock.id is @host
    @add h

  add: (p) ->
    @players.push p
    p.on \pass @~pass

    return if p.isBot

    p.on \name @~meta
    p.on \drop @~drop

    if p.isHost
      p.once \start @~start

    @meta!

  drop: (p) ->
    return if @round

    index = @players.indexOf p
    @players.splice index, 1
    @meta!

  meta: !->
    players = for p of @players
      { p.name, p.time, packs: p.packs.length }
    for p, i of @players
      p.send \set { players, self: i }

  start: (addBots) ->
    if addBots
      while @players.length < @seats
        @add new Bot

    _.shuffle @players

    for p, i of @players
      p.index = i

    @startRound!

  startRound: ->
    unless set = @sets[@round++]
      return @end!

    @delta *= -1
    @activePacks = @players.length

    for p of @players
      p.start set, @round

  pass: (pack, index) ->
    player = _.at @players, index + @delta

    if pack.length
      player.receive pack
    else if !--@activePacks
      @startRound!

    @meta!

  end: ->
    console.log \end @id

    data = @{ sets, start: startTime }
    data.end = Date.now! / 1e3 | 0
    data.players = for p of @players
      p{ isBot, picks }

    db data

module.exports = Draft
