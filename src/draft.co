assert = require \assert
{EventEmitter} = require \events
Bot = require \./bot
Human = require \./human
send = require \./db/send
_ = require \./_
genCube = require \./generate/cube
genPack = require \./generate/pack
Cards = require \../data/cards
Sets = require \../data/sets

HOUR = 1e3 * 60 * 60
drafts = {}

transformCube = (cube) ->
  cube .= split \\n
  if cube.length < 360
    throw Error 'cubes must have at least 360 cards'
  cube = for name of cube
    name .= trim!replace /(1.?)?\s*/ ''
    if name not in Cards
      throw Error "invalid card: #name"
    name
  cube

do decrement = ->
  for id, d in drafts
    for p of d.players
      if p.time and !--p.time
        p.autopick!
  setTimeout decrement, 1e3

class Draft extends EventEmitter
  ({cube, host, seats, sets, type}) ->
    seats = Number <>
    assert type of <[ cube draft sealed ]>
    assert 1 <= seats <= 8
    assert typeof host is \string
    if type is \cube
      assert !sets
      assert typeof cube is \string
      cube = transformCube cube
    else
      assert !cube
      assert sets instanceof Array
      n = if type is \draft then 3 else 6
      assert sets.length is n
      for set of sets
        assert set in Sets

    @ <<<< { cube, host, seats, sets, type }
    @ <<<<
      id: _.uid!
      players: []
      startTime: Date.now! / 1e3 | 0
      timeout: setTimeout @end.bind(@, \timeout), HOUR

  delta: -1
  round: 0
  state: \open

  join: (sock) ->
    {id} = sock
    for p of @players
      if p.id is id
        if p.dropped
          p.send \error 'you were dropped'
          return
        p.attach sock
        p.send \set @{ round }
        @meta!
        return

    unless @state is \open
      return sock.send \error 'draft started'

    if @players.length is @seats
      return sock.send \error 'draft full'

    h = new Human sock, sock.id is @host

    h.on \meta @~meta
    h.on \drop @~drop
    h.on \getCap @~getCap

    if h.isHost
      h.once \start (@addBots) ~>
        @start!

    @add h
    @meta!

  add: (p) ->
    @players.push p
    p.on \pass @~pass

  drop: (h) ->
    return unless @state is \open

    h.removeAllListeners!
    @players = _.without <>, h
    @meta!

  send: !(name, args) ->
    for p of @players
      p.send name, args

  meta: !->
    # TODO only send time + packs
    players = for p of @players
      { p.dropped, p.hash, p.name, p.time, packs: p.packs.length }
    for p, i of @players
      p.send \set { players, self: i }

  start: ->
    @state = \started
    clearTimeout @timeout
    @timeout = setTimeout @end.bind(@, \timeout), HOUR

    if @type is \sealed
      @round = 4
      for p of @players
        cards = for @sets => genPack &
        cards = _.flat <>
        p[p.zone] = cards
        p.send \set { (p.zone): cards, @round }
      return

    drafts[@id] = @

    if @addBots
      while @players.length < @seats
        @add new Bot

    _.shuffle @players

    for p, i of @players
      p.index = i

    numPacks = @players.length * 3
    @packs =
      if @cube
        genCube numPacks, that
      else
        genPack numPacks, @sets

    @startRound!
    @meta!

  startRound: !->
    r = ++@round
    @send \set round: r
    if r is 4
      return @end!

    if @sets
      set = that[r - 1]

    @delta *= -1
    @activePacks = @players.length

    for p of @players
      p.startRound!
      p.receive @packs.pop!

  pass: (pack, index) ->
    player = _.at @players, index + @delta

    if pack.length
      player.receive pack
    else if !--@activePacks
      @startRound!

    # TODO ignore bot, dropped passes
    @meta!

  getCap: (p) ->
    return unless @state is \done
    s = ''
    delta = -1
    # regenerate packs by looping over player picks
    for PACK from 0 to 2
      delta *= -1
      for PICK from 0 to p.picks[PACK]length - 1
        s += "#{PACK + 1}, #{PICK + 1}\n"
        playerIndex = p.index
        cardIndex = PICK
        cards = []
        while card = _.at(@players, playerIndex)picks[PACK][cardIndex++]
          cards.push card.name
          playerIndex += delta
        cards.0 = '* ' + <>
        s += cards.sort!join \\n
        s += '\n\n'
    p.send \set { cap: s }

  end: (err) ->
    clearTimeout @timeout
    delete drafts[@id]
    @state = \done

    if err
      @emit \end
      @send \error err
      return

    setTimeout (~> @emit \end), HOUR

    return unless @sets

    data =
      start: @startTime
      end: Date.now! / 1e3 | 0
      sets: @sets

    data.players = for p of @players
      p{ isBot, picks }

    send data

module.exports = Draft
