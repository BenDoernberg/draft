Player = require \./player
genHash = require \./generate/hash

class Human extends Player
  (@sock, @isHost) ->
    super!
    @ <<<< sock{ name, id }
    @attach sock

  dropped: false

  attach: (sock) ->
    # TODO auto reconnect, d/c notice
    @sock.removeAllListeners!
    @sock = sock
    @send = sock~send
    @send \set { @isHost, @main, pack: @packs.0 }

    # TODO events hash
    # TODO bubbling, single arg w/ data + src, namespaces
    sock.on \pick @~pick
    sock.on \name @~setName
    sock.on \drop ~> @emit \drop @
    sock.on \hash (deck) ~>
      @hash = genHash deck
      @emit \meta

    if @isHost
      sock.on \start ~> @emit \start it

  setName: ->
    return unless typeof it is \string
    @name = it.slice 0 16
    @emit \meta

  sendPack: ->
    pack = @packs.0

    @time = pack.length * 5

    if @dropped or pack.length is 1
      process.nextTick ~> @pick 0 true
    else
      @send \set { pack }

  autopick: ->
    super!
    @dropped = true
    @send \set pack: []

  pick: (index) ->
    return unless super index

    if !@packs.length
      @time = 0

    @send \add @main[* - 1]

module.exports = Human
