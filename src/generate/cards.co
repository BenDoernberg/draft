fs = require \fs

request = require \request

try
  raw = require \../../data/AllSets
  go raw
catch
  (err, res, body) <- request \http://mtgjson.com/json/AllSets.json
  throw err if err
  raw = JSON.parse body
  go raw

go = (raw) ->
  Cards = {}
  Sets  = {}

  for tla, rawSet in raw
    continue if rawSet.type of <[ archenemy vanguard ]>

    setName = rawSet.name

    if setName is 'Time Spiral "Timeshifted"'
      setName = 'Time Spiral'
      set = Sets['Time Spiral']
      set.mythic = []
      set.special = []
      rawSet.booster = true
    else
      set = Sets[setName] =
        common: []
        uncommon: []
        rare: []
        mythic: []
        special: []

    cards = []
    split = []
    prev = null

    for rawCard of rawSet.cards
      if rawCard.layout of <[ double-faced flip ]>
      and rawCard.number[* - 1] is \b
        continue

      {colors, multiverseid, name, rarity} = rawCard

      rarity .= toLowerCase!
      if rarity is 'basic land'
        continue
      if rarity is 'mythic rare'
        rarity = \mythic

      name .= replace \Ã† \AE
      if name is prev
        continue # alt art
      prev = name

      if rawCard.layout is \split
        name = rawCard.names.join ' // '

      url = "http://mtgimage.com/multiverseid/#{multiverseid}.jpg"

      color =
        if !colors
          \A
        else if colors.length > 1
          \Y
        else if colors.0 is \Blue
          \U
        else
          colors.0.0

      card = { color, name, rarity, url, score: 99 }
        <<<< rawCard{ cost: manaCost, cmc, text, type }
      card.cmc or= 0
      card.urls = { "#setName": url }

      if rawCard.layout is \split
        split.push card
      else
        cards.push card

    join = {}
    for splitCard of split
      {name} = splitCard
      card = join[name]

      if !card
        join[name] = splitCard
        cards.push splitCard
        continue

      card.cmc  += splitCard.cmc
      card.text += "\n\n//\n\n#{splitCard.text}"
      card.cost += " // #{splitCard.cost}"

      if card.color is not splitCard.color
        card.color = \Y

    for card of cards
      lc = card.name.toLowerCase!
      set[card.rarity]push lc
      if Cards[lc]
        that.urls[setName] = card.url
      else
        Cards[lc] = card
        delete card.url

    for rarity of <[ mythic special ]>
      unless set[rarity]length
        delete set[rarity]

    if not rawSet.booster
      delete Sets[setName]

  # smelly
  Sets.Unglued.uncommon = <>filter (name) ->
    if /token card/test name 
      delete Cards[name]
      return false
    true

  # http://wiki.mtgsalvation.com/article/Booster_pack
  #
  # from 7th edition / shards, 1 common was replaced by 1 land card
  # time spiral block is special
  #
  # http://en.wikipedia.org/wiki/List_of_Magic:_The_Gathering_sets
  largeSets =
    'Fourth Edition'
    'Fifth Edition'
    'Classic Sixth Edition'
    'Portal'
    'Portal Second Age'
    'Portal Three Kingdoms'
    'Starter 1999'
    'Unglued'
    'Unhinged'
    'Mirage'
    'Visions'
    'Weatherlight'
    'Tempest'
    'Stronghold'
    'Exodus'
    "Urza's Saga"
    "Urza's Legacy"
    "Urza's Destiny"
    'Mercadian Masques'
    'Nemesis'
    'Prophecy'
    'Invasion'
    'Planeshift'
    'Apocalypse'
    'Odyssey'
    'Torment'
    'Judgment'
    'Onslaught'
    'Legions'
    'Scourge'
    'Mirrodin'
    'Darksteel'
    'Fifth Dawn'
    'Champions of Kamigawa'
    'Betrayers of Kamigawa'
    'Saviors of Kamigawa'
    'Ravnica: City of Guilds'
    'Guildpact'
    'Dissension'
    'Coldsnap'
    'Planar Chaos'
    'Future Sight'
    'Lorwyn'
    'Morningtide'
    'Shadowmoor'
    'Eventide'
  for setName of largeSets
    Sets[setName]size = 11

  DGM = Sets["Dragon's Maze"]
  DGM.special =
    gate:
      'azorius guildgate'
      'boros guildgate'
      'dimir guildgate',
      'golgari guildgate'
      'gruul guildgate'
      'izzet guildgate'
      'orzhov guildgate'
      'rakdos guildgate'
      'selesnya guildgate'
      'simic guildgate'
    shock:
      'blood crypt'
      'breeding pool'
      'godless shrine'
      'hallowed fountain'
      'overgrown tomb'
      'sacred foundry'
      'steam vents'
      'stomping ground'
      'temple garden'
      'watery grave'
      "maze's end"
  DGM.common = for name of <> => name unless name of DGM.special.gate
  DGM.mythic = for name of <> => name unless name is "maze's end"

  if not fs.existsSync \data
    fs.mkdirSync \data

  fs.writeFileSync \data/cards.json JSON.stringify Cards, null 2
  fs.writeFileSync \data/sets.json  JSON.stringify Sets,  null 2
